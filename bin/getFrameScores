#!/usr/bin/env python
# coding: utf-8
"""Get the frame scores for a run"""

import argparse
import numpy as np
import h5py
from pathlib import Path
from cxiapi import cxiData, calibrateFixedGainModule, value2ROI
from cxiapi.hitsAnalyzer import plotHist, getScore
import matplotlib.pyplot as plt
from p_tqdm import p_umap
from functools import partial
import multiprocessing as mp


def getHitScore(idx_range: list, num_cpus=0, photon_thresh=0.5) -> list:
    # Get the index of the hits
    if num_cpus == 0:
        num_cpus = checkChuck(len(idx_range), chuckSize=25000)
    print(f'Using {num_cpus} CPU cores.')
    print(f'Photon threshold: {photon_thresh}')
    results = p_umap(partial(check_snapshot,
                             module_index=module_index,
                             photon_thresh=photon_thresh),
                     idx_range,
                     num_cpus=num_cpus)
    return np.array(results)


def check_snapshot(snap_idx, module_index, photon_thresh=0.5):
    calib_data = cxi.getCalibrateModule(snap_idx, module_index)
    scores = getScore(calib_data, adu_per_photon, mask, ROI, photon_thresh)
    intensity_score_ROI = scores[0]
    lit_pixels_ROI = scores[1]
    lit_pixels_module = scores[2]
    return snap_idx, intensity_score_ROI, lit_pixels_ROI, lit_pixels_module


def checkChuck(ntask, chuckSize):
    num_cpu = min(mp.cpu_count(), ntask // chuckSize)
    num_cpu = max(num_cpu, 1)
    return num_cpu


def replaceNone(input: list):
    arr = np.array(input)
    arr[arr == None] = np.inf
    # astype is important. Otherwise the type is np.o
    # which cannot be saved with h5py.
    return arr.astype(float)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('-n',
                        '--nframes',
                        default=0,
                        type=int,
                        help='Number of frames to deal with.')
    parser.add_argument('--ncpu',
                        default=0,
                        type=int,
                        help='Number of CPUs for calculation.')
    parser.add_argument('-t',
                        '--thresh',
                        default=0.5,
                        type=int,
                        help='Photon threshold for frame score, default=0.5')
    parser.add_argument('run', help='Run number', type=int)
    args = parser.parse_args()
    run = args.run
    nframes = args.nframes
    ncpu = args.ncpu
    photon_thresh = args.thresh

    # run = int(sys.argv[1])
    # The folder of cxi files
    cxi_folder = '/gpfs/exfel/u/scratch/SPB/202130/p900201/spi-comission/vds/'
    # Cheetah files folder for calibration
    calib_folder = '/gpfs/exfel/exp/SPB/202130/p900201/usr/Software/calib/r0361-r0362-r0363/'
    # Geometry file for the detector
    geom_file = '/gpfs/exfel/exp/SPB/202130/p900201/usr/Software/geom/agipd_2696_v5.geom'

    cxi_path = Path(cxi_folder, f'r{run:04}.cxi')
    fn = str(cxi_path)

    cxi = cxiData(fn, verbose=1, debug=0)
    pulse = np.arange(0, 352)
    base_pulse_filter = np.ones(600, dtype="bool")
    base_pulse_filter[len(pulse):] = False
    base_pulse_filter[0] = False
    base_pulse_filter[18::32] = False
    base_pulse_filter[29::32] = False
    good_cells = pulse[base_pulse_filter[:len(pulse)]]
    cxi.setGoodCells(good_cells)
    cxi.setCalib(calib_folder)
    cxi.setGeom(geom_file)

    # Hitfinding on which module.
    module_index = 15
    adu_per_photon = 45

    # Fixed gain
    cxi.setGainMode(0)
    cxi.setADU_per_photon(adu_per_photon)
    # ROI
    ROI_val = ((512 - 50, None), (None, 51))
    ROI = value2ROI(ROI_val)
    cxi.setROI(ROI_val)
    # Mask
    mask = np.ones((512, 128))
    mask[470:473, 15:18] = 0
    cxi.setModuleMasks(15, mask)

    # Parallel cell
    data = cxi.data
    good_frames = cxi.good_frames
    cell_ids = cxi.cellIDs
    gain_mode = cxi.gain_mode
    calib = cxi.calib

    if nframes < 1:
        idx_range = good_frames
    else:
        idx_range = good_frames[:nframes]

    # DEGBUG
    # results = getHitScore([383460, 383461], ncpu, photon_thresh=photon_thresh)

    results = getHitScore(idx_range, ncpu, photon_thresh=photon_thresh)
    frame_indices = results[:, 0].astype(int)
    intensity_scores_ROI = results[:, 1]
    lit_pixels_ROI = results[:, 2].astype(int)
    lit_pixels_module = results[:, 3].astype(int)

    # DEGBUG
    # output_fn = f'r{run:04}_hits_test.h5'

    output_fn = f'r{run:04}_hits.h5'
    with h5py.File(output_fn, 'w') as h5:
        h5["run"] = run
        h5["cxi_fname"] = cxi.fname
        h5["cxi_calib_folder"] = calib_folder
        h5["cxi_geom_file"] = geom_file
        h5["cxi_gain_mode"] = cxi.gain_mode
        h5["cxi_adu_per_photon"] = adu_per_photon
        h5["cxi_adu_per_photon"].attrs[
            'description'] = 'The adu_per_photon used for frame score calcualtion'
        h5["hits_ROI_value"] = replaceNone(cxi.ROI_value)
        h5["hits_ROI_value"].attrs[
            'description'] = 'The ROI setting for frame score calculation'
        h5["hits_module"] = module_index
        h5["hits_module"].attrs[
            'description'] = 'The module used for frame score calcualtion'
        h5["hits_photon_thresh"] = photon_thresh
        h5["hits_photon_thresh"].attrs[
            'description'] = 'The photon threshold for lit_pixels and intensity_scores'
        h5["frame_indices"] = frame_indices
        h5["lit_pixels_ROI"] = lit_pixels_ROI
        h5["lit_pixels_module"] = lit_pixels_module
        h5["intensity_scores_ROI"] = intensity_scores_ROI
        if len(cxi.module_masks) > 0:
            grp = h5.create_group('module_masks')
            grp.attrs[
                'description'] = 'The masks used for frame score calculation'
            for key, value in cxi.module_masks.items():
                grp[key] = value
    print(f'Written in {output_fn}')

    plotHist(run, intensity_scores_ROI, 'intensity_scores_ROI')
    plotHist(run, lit_pixels_ROI, 'lit_pixels_ROI')
    plotHist(run, lit_pixels_module, 'lit_pixels_module')